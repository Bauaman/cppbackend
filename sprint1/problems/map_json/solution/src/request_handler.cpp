#include "request_handler.h"

namespace http_handler {

    boost::json::value RequestHandler::PrepareResponce(const std::string& req_, model::Game& game_) {
        boost::json::array response_text_arr;
        boost::json::object response_text_obj;
        std::cout << "Prepare Response function: " << req_ << std::endl;
        const std::vector<model::Map>& maps = game_.GetMaps();
        
        if (req_.empty()) {
            throw std::logic_error("bad request /api/v1/maps/...");
        }
        if (req_ == "maps") {
            for (auto& map : maps) {
                boost::json::object map_object;
                map_object["id"] = *map.GetId();
                map_object["name"] = map.GetName();
                response_text_arr.push_back(map_object);
            }
            return response_text_arr;
        } else {
            model::Map::Id  id_{req_};
            const model::Map* map = game_.FindMap(id_);
            if (map != nullptr) {
                std::vector<std::string> keys_in_map = map->GetKeys();
                std::cout << "Map found" << std::endl;
                for (const auto& key : keys_in_map) {
                    if (key == "id") {
                        response_text_obj["id"] = *map->GetId();
                    } else if (key == "name") {
                        response_text_obj["name"] = map->GetName();
                    } else if (key == "roads") {
                        boost::json::array roads;
                        for (const auto& road : map->GetRoads()) {
                            boost::json::object road_;
                            if (road.IsHorizontal()) {
                                road_["x0"] = road.GetStart().x;
                                road_["y0"] = road.GetStart().y;
                                road_["x1"] = road.GetEnd().x;
                            }
                            if (road.IsVertical()) {
                                road_["x0"] = road.GetStart().x;
                                road_["y0"] = road.GetStart().y;
                                road_["y1"] = road.GetEnd().y;
                            }
                            roads.push_back(road_);
                        }
                        response_text_obj["roads"] = roads;
                    } else if(key == "buildings") {
                        boost::json::array buildings;
                        for (const auto& building : map->GetBuildings()) {
                            boost::json::object build_;
                            build_["x"] = building.GetBounds().position.x;
                            build_["y"] = building.GetBounds().position.y;
                            build_["w"] = building.GetBounds().size.width;
                            build_["h"] = building.GetBounds().size.height;
                            buildings.push_back(build_);
                        }
                        response_text_obj["buildings"] = buildings;
                    } else if (key == "offices") {
                        boost::json::array offices;
                        for (const auto& office : map->GetOffices()) {
                            boost::json::object office_;
                            office_["id"] = *office.GetId();
                            office_["x"] = office.GetPosition().x;
                            office_["y"] = office.GetPosition().y;
                            office_["offsetX"] = office.GetOffset().dx;
                            office_["offsetY"] = office.GetOffset().dy;
                            offices.push_back(office_);
                        }
                        response_text_obj["offices"]=offices;
                        return response_text_obj;
                    }
                }
            } else {
                std::cout << "Map NOT found" << std::endl;
                response_text_obj["code"] = "mapNotFound";
                response_text_obj["message"] = "Map Not Found";
                return response_text_obj;
            }
        }
        return response_text_arr;
    }




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































}  // namespace http_handler
